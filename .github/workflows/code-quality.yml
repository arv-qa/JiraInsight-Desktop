name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  format-check:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Check code formatting
      run: |
        # Check if Spotless plugin is configured
        if mvn help:describe -Dplugin=com.diffplug.spotless:spotless-maven-plugin > /dev/null 2>&1; then
          echo "üé® Checking code formatting with Spotless..."
          mvn spotless:check || echo "‚ö†Ô∏è Code formatting issues detected"
        else
          echo "‚ÑπÔ∏è Spotless plugin not configured, skipping formatting check"
          echo "‚úÖ Code formatting check skipped (plugin not available)"
        fi
      continue-on-error: true
        
    - name: Generate formatting report
      if: failure()
      run: |
        echo "Code formatting issues detected. Run 'mvn spotless:apply' to fix them."
        if mvn help:describe -Dplugin=com.diffplug.spotless:spotless-maven-plugin > /dev/null 2>&1; then
          mvn spotless:apply --dry-run || echo "Spotless dry-run completed"
        else
          echo "Spotless plugin not configured"
        fi

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run SpotBugs
      run: |
        # Check if SpotBugs plugin is configured
        if mvn help:describe -Dplugin=com.github.spotbugs:spotbugs-maven-plugin > /dev/null 2>&1; then
          mvn compile spotbugs:spotbugs || echo "SpotBugs analysis completed with warnings"
        else
          echo "SpotBugs plugin not configured, skipping static analysis"
        fi
        
    - name: Upload SpotBugs report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-report
        path: target/spotbugs*.xml
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Run PMD
      run: |
        # Check if PMD plugin is configured
        if mvn help:describe -Dplugin=org.apache.maven.plugins:maven-pmd-plugin > /dev/null 2>&1; then
          mvn pmd:pmd || echo "PMD analysis completed with warnings"
        else
          echo "PMD plugin not configured, skipping analysis"
        fi
        
    - name: Upload PMD report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pmd-report
        path: target/site/pmd*
        retention-days: 30
        if-no-files-found: ignore

  javadoc-check:
    name: Javadoc Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Generate Javadoc
      run: |
        mvn javadoc:javadoc
        
    - name: Check Javadoc warnings
      run: |
        if grep -q "warning" target/site/apidocs/javadoc.log 2>/dev/null; then
          echo "Javadoc warnings detected:"
          grep "warning" target/site/apidocs/javadoc.log
          exit 1
        else
          echo "No Javadoc warnings found"
        fi
        
    - name: Upload Javadoc
      uses: actions/upload-artifact@v4
      with:
        name: javadoc
        path: target/site/apidocs/
        retention-days: 30

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run tests with coverage
      run: |
        mvn clean test jacoco:report
        
    - name: Generate coverage report
      run: |
        mvn jacoco:report
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: target/site/jacoco/
        retention-days: 30
        
    - name: Check coverage threshold
      run: |
        # Check if JaCoCo report exists
        if [ -f "target/site/jacoco/index.html" ]; then
          # Extract coverage percentage from jacoco report
          COVERAGE=$(grep -o 'Total[^%]*%' target/site/jacoco/index.html | grep -o '[0-9]*%' | head -1 | tr -d '%' || echo "0")
          echo "Current coverage: ${COVERAGE}%"

          # Set minimum coverage threshold (reduced for initial setup)
          THRESHOLD=30

          if [ "$COVERAGE" -lt "$THRESHOLD" ]; then
            echo "‚ö†Ô∏è Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            echo "Consider adding more tests to improve coverage"
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi
        else
          echo "‚ö†Ô∏è No JaCoCo coverage report found, skipping coverage check"
        fi
