name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/TEST-*.xml
        reporter: java-junit
        fail-on-error: false

    - name: Build application
      run: mvn clean compile

    - name: Package application
      run: mvn clean package -DskipTests

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jira-insight-desktop-jar
        path: target/*.jar
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=jirainsight-desktop \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io
        else
          echo "SonarCloud analysis skipped - SONAR_TOKEN not configured"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run OWASP Dependency Check
      run: |
        # Check if OWASP plugin is configured, if not skip
        if mvn help:describe -Dplugin=org.owasp:dependency-check-maven > /dev/null 2>&1; then
          mvn org.owasp:dependency-check-maven:check || echo "OWASP check completed with warnings"
        else
          echo "OWASP dependency check plugin not configured, skipping security scan"
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.*
        retention-days: 30
        if-no-files-found: ignore

  build-cross-platform:
    name: Build Cross-Platform
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build for ${{ matrix.os }}
      run: mvn clean package -DskipTests

    - name: Create native installer (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Add jpackage command for Windows installer
        echo "Windows installer creation would go here"

    - name: Create native installer (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Add jpackage command for macOS installer
        echo "macOS installer creation would go here"

    - name: Create native installer (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Add jpackage command for Linux installer
        echo "Linux installer creation would go here"

    - name: Upload platform-specific artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jira-insight-desktop-${{ matrix.os }}
        path: target/*.jar
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan, build-cross-platform]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build release artifacts
      run: mvn clean package -DskipTests

    - name: Get release version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## JiraInsight Desktop ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Features" >> $GITHUB_OUTPUT
        echo "- Modern JavaFX desktop application for Jira issue management" >> $GITHUB_OUTPUT
        echo "- Secure API token authentication" >> $GITHUB_OUTPUT
        echo "- Quick issue search and advanced JQL queries" >> $GITHUB_OUTPUT
        echo "- Detailed issue view with subtasks and comments" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Technical Details" >> $GITHUB_OUTPUT
        echo "- Java ${{ env.JAVA_VERSION }}+ required" >> $GITHUB_OUTPUT
        echo "- JavaFX 21 UI framework" >> $GITHUB_OUTPUT
        echo "- Maven build system" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation" >> $GITHUB_OUTPUT
        echo "1. Download the JAR file" >> $GITHUB_OUTPUT
        echo "2. Run: \`java -jar jira-insight-desktop-${{ steps.get_version.outputs.VERSION }}.jar\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/*.jar
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Generate Javadoc
      run: mvn javadoc:javadoc

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/site/apidocs
        destination_dir: javadoc